import pygame
import random
import math
from enum import Enum
import json
import os
from datetime import datetime
from debug import debug, clear_debug, draw_debug, toggle_debug, is_debug_enabled
from settings import *

# Colors
WHITE = (255, 255, 255)
YELLOW = (255, 255, 0)
BLUE = (100, 150, 255)
RED = (255, 100, 100)
GREEN = (0, 255, 0)
ORANGE = (255, 165, 0)
LIGHT_BLUE = (173, 216, 230)
GRAY = (128, 128, 128)
PURPLE = (147, 112, 219)
PINK = (255, 192, 203)

class StarType(Enum):
    MAIN_SEQUENCE = "Main Sequence Star"
    RED_GIANT = "Red Giant"
    WHITE_DWARF = "White Dwarf"
    BLUE_GIANT = "Blue Giant"

class ResourceType(Enum):
    MINERALS = "Minerals"
    CRYSTALS = "Crystals"
    GASES = "Gases"
    ORGANIC = "Organic Matter"
    ENERGY = "Energy Source"
    WATER = "Water"
    RARE_ELEMENTS = "Rare Elements"

class PlanetType(Enum):
    TERRESTRIAL = "Terrestrial"
    GAS_GIANT = "Gas Giant"
    ICE_WORLD = "Ice World"
    DESERT = "Desert"
    VOLCANIC = "Volcanic"
    OCEANIC = "Oceanic"

class StarProperties:
    PROPERTIES = {
        StarType.MAIN_SEQUENCE: {
            'color': YELLOW,
            'min_size': 4,
            'max_size': 6,
            'min_planets': 2,
            'max_planets': 5,
            'probability': 0.4
        },
        StarType.RED_GIANT: {
            'color': RED,
            'min_size': 8,
            'max_size': 12,
            'min_planets': 1,
            'max_planets': 3,
            'probability': 0.3
        },
        StarType.WHITE_DWARF: {
            'color': LIGHT_BLUE,
            'min_size': 2,
            'max_size': 4,
            'min_planets': 0,
            'max_planets': 2,
            'probability': 0.2
        },
        StarType.BLUE_GIANT: {
            'color': BLUE,
            'min_size': 6,
            'max_size': 10,
            'min_planets': 3,
            'max_planets': 6,
            'probability': 0.1
        }
    }

    @staticmethod
    def get_random_type():
        return random.choices(
            list(StarType),
            weights=[StarProperties.PROPERTIES[t]['probability'] for t in StarType]
        )[0]

class PlanetProperties:
    PROPERTIES = {
        PlanetType.TERRESTRIAL: {
            'color': GREEN,
            'min_size': 8,
            'max_size': 12,
            'possible_resources': [
                (ResourceType.MINERALS, 0.8),
                (ResourceType.WATER, 0.6),
                (ResourceType.ORGANIC, 0.4),
                (ResourceType.RARE_ELEMENTS, 0.2)
            ]
        },
        PlanetType.GAS_GIANT: {
            'color': ORANGE,
            'min_size': 14,
            'max_size': 20,
            'possible_resources': [
                (ResourceType.GASES, 0.9),
                (ResourceType.ENERGY, 0.4),
                (ResourceType.RARE_ELEMENTS, 0.1)
            ]
        },
        PlanetType.ICE_WORLD: {
            'color': LIGHT_BLUE,
            'min_size': 6,
            'max_size': 10,
            'possible_resources': [
                (ResourceType.WATER, 0.9),
                (ResourceType.MINERALS, 0.3),
                (ResourceType.GASES, 0.2)
            ]
        },
        PlanetType.DESERT: {
            'color': YELLOW,
            'min_size': 8,
            'max_size': 12,
            'possible_resources': [
                (ResourceType.MINERALS, 0.7),
                (ResourceType.RARE_ELEMENTS, 0.3),
                (ResourceType.ENERGY, 0.2)
            ]
        },
        PlanetType.VOLCANIC: {
            'color': RED,
            'min_size': 8,
            'max_size': 14,
            'possible_resources': [
                (ResourceType.MINERALS, 0.8),
                (ResourceType.ENERGY, 0.6),
                (ResourceType.RARE_ELEMENTS, 0.4)
            ]
        },
        PlanetType.OCEANIC: {
            'color': BLUE,
            'min_size': 10,
            'max_size': 16,
            'possible_resources': [
                (ResourceType.WATER, 1.0),
                (ResourceType.ORGANIC, 0.7),
                (ResourceType.GASES, 0.3)
            ]
        }
    }

    @staticmethod
    def get_random_type():
        return random.choice(list(PlanetType))

    @staticmethod
    def generate_resources(planet_type):
        resources = []
        for resource, probability in PlanetProperties.PROPERTIES[planet_type]['possible_resources']:
            if random.random() < probability:
                amount = random.randint(50, 100)  # Random resource amount between 50-100
                resources.append({'type': resource, 'amount': amount})
        return resources

class NameGenerator:
    PREFIXES = [
        "Alpha", "Beta", "Gamma", "Delta", "Nova", "Proxima", "Sirius",
        "Vega", "Rigel", "Antares", "Polaris", "Centauri", "Cygnus",
        "Lyra", "Orion", "Andromeda", "Cassiopeia", "Perseus"
    ]
    
    SUFFIXES = [
        "Prime", "Minor", "Major", "Core", "Binary", "Nexus", "Gateway",
        "Hub", "Cluster", "Network", "System", "Complex", "Station"
    ]
    
    NUMBERS = ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X"]
    
    @classmethod
    def generate_name(cls):
        if random.random() < 0.3:  # 30% chance for a number suffix
            return f"{random.choice(cls.PREFIXES)} {random.choice(cls.NUMBERS)}"
        else:
            return f"{random.choice(cls.PREFIXES)} {random.choice(cls.SUFFIXES)}"

class StarSystem:
    def __init__(self, x, y, game_instance=None):
        self.x = x
        self.y = y
        self.name = NameGenerator.generate_name()
        self.star_type = StarProperties.get_random_type()
        props = StarProperties.PROPERTIES[self.star_type]
        self.game_instance = game_instance
        
        self.size = random.randint(props['min_size'], props['max_size'])
        self.color = props['color']
        self.planets = []
        self.num_planets = random.randint(props['min_planets'], props['max_planets'])
        self.generate_planets()
        
        # Font setup for names
        self.font = pygame.font.Font(None, 24)
        self.name_surface = self.font.render(self.name, True, WHITE)
        self.name_rect = self.name_surface.get_rect()
        
        # Calculate the total height including text
        text_height = self.name_rect.height
        total_height = self.size * 2 + text_height + 15  # 15 is padding
        
        # Update collision rect to include text area
        self.rect = pygame.Rect(self.x - self.size, 
                              self.y - self.size, 
                              self.size * 2, 
                              total_height)
        
        # Text position
        self.name_rect.centerx = self.x
        self.name_rect.top = self.y + self.size + 15

    def collides_with(self, other):
        # Add padding around rectangles for better spacing
        padding = 40
        expanded_rect = self.rect.inflate(padding, padding)
        other_expanded_rect = other.rect.inflate(padding, padding)
        return expanded_rect.colliderect(other_expanded_rect)

    def generate_planets(self):
        for i in range(self.num_planets):
            angle = (i / max(1, self.num_planets)) * 2 * math.pi
            # Adjust planet distance based on star type
            min_distance = self.size * 8
            max_distance = self.size * 20
            distance = random.randint(min_distance, max_distance)
            planet_x = distance * math.cos(angle)
            planet_y = distance * math.sin(angle)
            
            # Generate planet with type and properties
            planet_type = PlanetProperties.get_random_type()
            props = PlanetProperties.PROPERTIES[planet_type]
            planet_size = random.randint(props['min_size'], props['max_size'])
            resources = PlanetProperties.generate_resources(planet_type)
            
            # Generate planet name (star name + orbit number)
            planet_name = f"{self.name} {i + 1}"
            
            self.planets.append({
                'name': planet_name,
                'x': planet_x,
                'y': planet_y,
                'size': planet_size,
                'color': props['color'],
                'type': planet_type,
                'resources': resources,
                'orbit_number': i + 1
            })

    def draw_galaxy_view(self, screen):
        # Draw the star with a small glow effect
        glow_size = self.size + 2
        pygame.draw.circle(screen, (*self.color[:3], 128), (int(self.x), int(self.y)), glow_size)
        pygame.draw.circle(screen, self.color, (int(self.x), int(self.y)), self.size)
        
        # Draw name with shadow effect
        name_y_offset = self.size + 15
        
        # Draw shadow
        shadow_surface = self.font.render(self.name, True, GRAY)
        shadow_rect = shadow_surface.get_rect(centerx=self.x + 1, centery=self.y + name_y_offset + 1)
        screen.blit(shadow_surface, shadow_rect)
        
        # Draw text
        self.name_rect.centerx = self.x
        self.name_rect.centery = self.y + name_y_offset
        screen.blit(self.name_surface, self.name_rect)

    def draw_system_view(self, screen):
        # Adjust center position to account for info panel
        panel_width = 300  # Match the info panel width
        available_width = SCREEN_WIDTH - panel_width
        center_x = available_width // 2
        center_y = SCREEN_HEIGHT // 30
        
        # Draw system name at the top
        large_font = pygame.font.Font(None, 48)
        
        # Draw shadow for system name first
        shadow_text = large_font.render(self.name, True, GRAY)
        shadow_rect = shadow_text.get_rect(center=(center_x + 1, center_y + 1))  
        screen.blit(shadow_text, shadow_rect)
        
        # Draw main text
        title_text = large_font.render(self.name, True, WHITE)
        title_rect = title_text.get_rect(center=(center_x, center_y))
        screen.blit(title_text, title_rect)
        
        # Draw star type below the name
        type_font = pygame.font.Font(None, 36)
        
        # Draw shadow for star type
        shadow_type = type_font.render(self.star_type.value, True, GRAY)
        shadow_type_rect = shadow_type.get_rect(center=(center_x + 1, center_y + 41))  
        screen.blit(shadow_type, shadow_type_rect)
        
        # Draw main star type text
        type_text = type_font.render(self.star_type.value, True, self.color)
        type_rect = type_text.get_rect(center=(center_x, center_y + 40))
        screen.blit(type_text, type_rect)
        
        # Draw the star with glow
        center_y = SCREEN_HEIGHT // 2  # Reset center_y for star position
        glow_size = self.size * 3
        pygame.draw.circle(screen, (*self.color[:3], 128), (center_x, center_y), glow_size)
        pygame.draw.circle(screen, self.color, (center_x, center_y), self.size * 2)
        
        # Draw planets in their fixed positions
        orbit_font = pygame.font.Font(None, 20)
        
        for planet in self.planets:
            x = center_x + planet['x']
            y = center_y + planet['y']
            
            # Select appropriate planet image based on type
            if planet['type'] == PlanetType.DESERT:
                planet_img = self.game_instance.planet_images['desert']
            else:
                planet_img = self.game_instance.planet_images['oceanic']
            
            # Scale image to match planet size
            size = planet['size'] * 4  # Make planets a bit larger for better visibility
            scaled_img = pygame.transform.scale(planet_img, (size, size))
            
            # Calculate position for centered image
            img_rect = scaled_img.get_rect(center=(int(x), int(y)))
            
            # Draw the planet image
            screen.blit(scaled_img, img_rect)
            
            # Draw orbit number
            orbit_text = orbit_font.render(str(planet['orbit_number']), True, WHITE)
            orbit_rect = orbit_text.get_rect(
                center=(x, y - size//2 - 15)
            )
            # Draw text shadow with smaller offset
            shadow_text = orbit_font.render(str(planet['orbit_number']), True, GRAY)
            shadow_rect = shadow_text.get_rect(
                center=(x + 0.5, y - size//2 - 14.5)
            )
            screen.blit(shadow_text, shadow_rect)
            screen.blit(orbit_text, orbit_rect)

class BackgroundEffect:
    def __init__(self):
        # Generate background stars
        self.stars = []
        for _ in range(NUM_BACKGROUND_STARS):
            x = random.randint(0, SCREEN_WIDTH)
            y = random.randint(0, SCREEN_HEIGHT)
            size = random.randint(1, 2)
            brightness = random.randint(100, 180)  # Reduced brightness range
            self.stars.append({
                'x': x,
                'y': y,
                'size': size,
                'color': (brightness, brightness, brightness),
                'twinkle_offset': random.uniform(0, 2 * math.pi)  # For smoother twinkling
            })
        
        # Generate nebulae
        self.nebulae = []
        nebula_colors = [(RED[0], 0, RED[2], 20),      # Reduced alpha
                        (0, 0, BLUE[2], 20),           # Reduced alpha
                        (PURPLE[0], 0, PURPLE[2], 20), # Reduced alpha
                        (PINK[0], PINK[1], PINK[2], 20)]  # Reduced alpha
        
        for _ in range(NUM_NEBULAE):
            x = random.randint(0, SCREEN_WIDTH)
            y = random.randint(0, SCREEN_HEIGHT)
            size = random.randint(100, 200)
            color = random.choice(nebula_colors)
            num_particles = 40  # Reduced number of particles
            particles = []
            
            for _ in range(num_particles):
                angle = random.uniform(0, 2 * math.pi)
                distance = random.uniform(0, size)
                px = x + distance * math.cos(angle)
                py = y + distance * math.sin(angle)
                particle_size = random.randint(20, 35)  # Slightly reduced size range
                particles.append({
                    'x': px,
                    'y': py,
                    'size': particle_size
                })
            
            self.nebulae.append({
                'x': x,
                'y': y,
                'size': size,
                'color': color,
                'particles': particles
            })

    def draw_galaxy_background(self, screen):
        # Draw nebulae
        for nebula in self.nebulae:
            for particle in nebula['particles']:
                surface = pygame.Surface((particle['size'] * 2, particle['size'] * 2), pygame.SRCALPHA)
                pygame.draw.circle(surface, nebula['color'], 
                                (particle['size'], particle['size']), 
                                particle['size'])
                screen.blit(surface, (particle['x'] - particle['size'], 
                                    particle['y'] - particle['size']))
        
        # Draw background stars with subtle twinkling effect
        current_time = pygame.time.get_ticks() / 1000  # Time in seconds
        for star in self.stars:
            # Create a smoother, more subtle twinkling effect
            twinkle = math.sin(current_time + star['twinkle_offset']) * 10
            color = tuple(max(0, min(255, c + twinkle)) for c in star['color'])
            pygame.draw.circle(screen, color, (star['x'], star['y']), star['size'])

    def draw_system_background(self, screen):
        # Draw static background stars
        for star in self.stars[::3]:  # Use every third star for a sparser background
            pygame.draw.circle(screen, star['color'], (star['x'], star['y']), star['size'])

class GameState(Enum):
    STARTUP_MENU = "startup_menu"
    GALAXY = "galaxy"
    SYSTEM = "system"
    INGAME_MENU = "ingame_menu"

class MenuItem:
    def __init__(self, text, action, enabled=True):
        self.text = text
        self.action = action
        self.enabled = enabled
        self.selected = False
        
    def draw(self, screen, pos, font):
        color = WHITE if self.enabled else GRAY
        if self.selected:
            color = YELLOW
        text_surface = font.render(self.text, True, color)
        text_rect = text_surface.get_rect(center=pos)
        screen.blit(text_surface, text_rect)

class Menu:
    def __init__(self, items, title=""):
        self.items = items
        self.title = title
        self.selected_index = 0
        self.font = pygame.font.Font(None, 48)
        self.title_font = pygame.font.Font(None, 64)
        
    def draw(self, screen):
        # Draw semi-transparent background
        overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT))
        overlay.fill((0, 0, 0))
        overlay.set_alpha(200)
        screen.blit(overlay, (0, 0))
        
        # Draw title
        if self.title:
            title_surface = self.title_font.render(self.title, True, WHITE)
            title_rect = title_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 4))
            screen.blit(title_surface, title_rect)
        
        # Draw menu items and store their rects
        self.item_rects = []  # Store rects for mouse detection
        start_y = SCREEN_HEIGHT // 2
        spacing = 60
        for i, item in enumerate(self.items):
            item.selected = (i == self.selected_index)
            pos = (SCREEN_WIDTH // 2, start_y + i * spacing)
            text_surface = self.font.render(item.text, True, WHITE)
            text_rect = text_surface.get_rect(center=pos)
            self.item_rects.append(text_rect)
            item.draw(screen, pos, self.font)
    
    def handle_input(self, event):
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                self.selected_index = (self.selected_index - 1) % len(self.items)
            elif event.key == pygame.K_DOWN:
                self.selected_index = (self.selected_index + 1) % len(self.items)
            elif event.key == pygame.K_RETURN:
                if self.items[self.selected_index].enabled:
                    action = self.items[self.selected_index].action
                    if action:
                        return action()
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            # Check if mouse click hits any menu item
            mouse_pos = event.pos
            for i, rect in enumerate(self.item_rects):
                if rect.collidepoint(mouse_pos) and self.items[i].enabled:
                    self.selected_index = i
                    action = self.items[i].action
                    if action:
                        return action()
        return None

class Game:
    def __init__(self):
        pygame.init()
        
        # Create window without OpenGL
        self.screen = pygame.display.set_mode(
            (SCREEN_WIDTH, SCREEN_HEIGHT)
        )
        pygame.display.set_caption("Galaxy Conquest")
        self.clock = pygame.time.Clock()
        
        # Load planet images
        self.planet_images = {
            'desert': pygame.image.load('img/planet1.png').convert_alpha(),
            'oceanic': pygame.image.load('img/planet2.png').convert_alpha()
        }
        
        # Initialize fonts
        self.title_font = pygame.font.Font(None, 48)
        self.info_font = pygame.font.Font(None, 36)
        self.detail_font = pygame.font.Font(None, 24)
        
        # Info panel settings
        self.info_panel_rect = pygame.Rect(
            SCREEN_WIDTH - 300, 0,
            300, SCREEN_HEIGHT
        )
        
        # Save notification
        self.save_notification_time = 0
        self.save_notification_duration = 2000  # 2 seconds
        
        # Initialize game state
        self.state = GameState.STARTUP_MENU
        self.selected_system = None
        self.selected_planet = None
        self.star_systems = []
        self.background = BackgroundEffect()
        
        # Initialize menus
        self.create_menus()
    
    def create_menus(self):
        # Startup menu
        startup_menu_items = [
            MenuItem("New Game", self.new_game),
            MenuItem("Continue", self.continue_game, os.path.exists("saves/autosave.json")),
            MenuItem("Quit", self.quit_game)
        ]
        self.startup_menu = Menu(startup_menu_items, "Galaxy Conquest")
        
        # In-game menu (when pressing ESC)
        ingame_menu_items = [
            MenuItem("New Game", self.new_game),
            MenuItem("Save", self.save_game),
            MenuItem("Resume Game", self.return_to_game),
            MenuItem("Main Menu", self.quit_to_main_menu),
            MenuItem("Quit to Desktop", self.quit_game)
        ]
        self.ingame_menu = Menu(ingame_menu_items, "Pause")
    
    def new_game(self):
        self.star_systems = []
        self.generate_star_systems()
        self.state = GameState.GALAXY
        return True
    
    def generate_star_systems(self):
        attempts = 0
        max_attempts = 1000
        margin = 100
        
        while len(self.star_systems) < NUM_STAR_SYSTEMS and attempts < max_attempts:
            x = random.randint(margin, SCREEN_WIDTH - margin)
            y = random.randint(margin, SCREEN_HEIGHT - margin)
            
            new_system = StarSystem(x, y, self)
            
            collision = False
            for existing_system in self.star_systems:
                if new_system.collides_with(existing_system):
                    collision = True
                    break
            
            if not collision:
                self.star_systems.append(new_system)
            
            attempts += 1
    
    def save_game(self):
        # Convert planet data to JSON-serializable format
        def convert_planet_data(planet):
            planet_copy = planet.copy()
            planet_copy['type'] = planet['type'].name  # Convert PlanetType enum
            
            # Convert resources data
            resources_copy = []
            for resource in planet['resources']:
                resource_copy = resource.copy()
                resource_copy['type'] = resource['type'].name  # Convert ResourceType enum
                resources_copy.append(resource_copy)
            planet_copy['resources'] = resources_copy
            
            return planet_copy

        save_data = {
            'star_systems': [
                {
                    'x': system.x,
                    'y': system.y,
                    'name': system.name,
                    'star_type': system.star_type.name,
                    'size': system.size,
                    'planets': [convert_planet_data(p) for p in system.planets]
                }
                for system in self.star_systems
            ],
            'timestamp': datetime.now().isoformat()
        }
        
        os.makedirs('saves', exist_ok=True)
        with open('saves/autosave.json', 'w') as f:
            json.dump(save_data, f, indent=2)
        
        # Set notification time when game is saved
        self.save_notification_time = pygame.time.get_ticks()
        
        # If called from menu, return to game
        if self.state == GameState.INGAME_MENU:
            self.state = GameState.SYSTEM if self.selected_system else GameState.GALAXY
            return True
        return False
    
    def load_game(self):
        try:
            with open('saves/autosave.json', 'r') as f:
                save_data = json.load(f)
            
            self.star_systems = []
            for system_data in save_data['star_systems']:
                system = StarSystem(system_data['x'], system_data['y'], self)
                system.name = system_data['name']
                system.star_type = StarType[system_data['star_type']]
                system.size = system_data['size']
                
                # Convert planet type strings back to enums
                planets = []
                for planet in system_data['planets']:
                    planet_copy = planet.copy()
                    planet_copy['type'] = PlanetType[planet['type']]
                    
                    # Convert resource type strings back to enums
                    resources = []
                    for resource in planet['resources']:
                        resource_copy = resource.copy()
                        resource_copy['type'] = ResourceType[resource['type']]
                        resources.append(resource_copy)
                    planet_copy['resources'] = resources
                    
                    planets.append(planet_copy)
                system.planets = planets
                
                self.star_systems.append(system)
            
            self.state = GameState.GALAXY
            return True
        except (FileNotFoundError, json.JSONDecodeError, KeyError) as e:
            print(f"Error loading save file: {e}")
            return False
    
    def continue_game(self):
        return self.load_game()
    
    def return_to_game(self):
        self.state = GameState.SYSTEM if self.selected_system else GameState.GALAXY
        return True
    
    def quit_to_main_menu(self):
        self.state = GameState.STARTUP_MENU
        self.selected_system = None
        self.selected_planet = None
        return True
    
    def quit_game(self):
        return False
    
    def run(self):
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_F5 and self.state not in [GameState.STARTUP_MENU, GameState.INGAME_MENU]:
                        self.save_game()  # Don't use the return value for F5 quick save
                    elif event.key == pygame.K_ESCAPE:
                        if self.state == GameState.SYSTEM:
                            self.state = GameState.INGAME_MENU
                        elif self.state == GameState.GALAXY:
                            self.state = GameState.INGAME_MENU
                    elif event.key == pygame.K_F4:  
                        toggle_debug()
                
                # Handle menu input first
                if self.state in [GameState.STARTUP_MENU, GameState.INGAME_MENU]:
                    menu = self.startup_menu if self.state == GameState.STARTUP_MENU else self.ingame_menu
                    result = menu.handle_input(event)
                    if result is not None:
                        running = result
                # Handle game input only if not in menu
                elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                    if self.state == GameState.GALAXY:
                        self.handle_galaxy_click(event.pos)
                    elif self.state == GameState.SYSTEM:
                        self.handle_system_click(event.pos)
            
            # Clear debug info at start of frame
            clear_debug()
            
            # Draw
            self.screen.fill((0, 0, 0))
            
            if self.state == GameState.GALAXY:
                self.draw_galaxy_view()
                if is_debug_enabled():
                    # Add galaxy view debug info
                    debug(f"Systems: {len(self.star_systems)}")
                    debug(f"Mouse: {pygame.mouse.get_pos()}")
            elif self.state == GameState.SYSTEM:
                self.draw_system_view()
                if is_debug_enabled() and self.selected_system:
                    # Add system view debug info
                    debug(f"System: {self.selected_system.name}")
                    debug(f"Planets: {len(self.selected_system.planets)}")
                    if self.selected_planet:
                        debug(f"Selected: {self.selected_planet['name']}")
            elif self.state == GameState.STARTUP_MENU:
                self.draw_galaxy_view()  # Draw game as background
                self.startup_menu.draw(self.screen)
            elif self.state == GameState.INGAME_MENU:
                self.draw_system_view()  # Draw game as background
                self.ingame_menu.draw(self.screen)
            
            # Draw save notification on top
            self.draw_save_notification(self.screen)
            
            # Draw debug last
            draw_debug(self.screen)
            
            pygame.display.flip()
            self.clock.tick(60)
        
        pygame.quit()

    def handle_galaxy_click(self, pos):
        for system in self.star_systems:
            if system.rect.collidepoint(pos):
                self.selected_system = system
                self.selected_planet = None
                self.state = GameState.SYSTEM
                break
    
    def handle_system_click(self, pos):
        if not self.info_panel_rect.collidepoint(pos):
            panel_width = 300
            available_width = SCREEN_WIDTH - panel_width
            center_x = available_width // 2
            center_y = SCREEN_HEIGHT // 2
            
            for planet in self.selected_system.planets:
                planet_x = center_x + planet['x']
                planet_y = center_y + planet['y']
                planet_rect = pygame.Rect(
                    planet_x - planet['size'],
                    planet_y - planet['size'],
                    planet['size'] * 2,
                    planet['size'] * 2
                )
                if planet_rect.collidepoint(pos):
                    self.selected_planet = planet
                    break
            else:
                if pos[0] < self.info_panel_rect.left:
                    self.state = GameState.GALAXY
                    self.selected_system = None
                    self.selected_planet = None
    
    def draw_galaxy_view(self):
        self.background.draw_galaxy_background(self.screen)
        for system in self.star_systems:
            system.draw_galaxy_view(self.screen)
    
    def draw_system_view(self):
        self.background.draw_system_background(self.screen)
        if self.selected_system:
            self.selected_system.draw_system_view(self.screen)
            self.draw_info_panel(self.screen)

    def draw_info_panel(self, screen):
        if self.state != GameState.SYSTEM or not self.selected_system:
            return

        # Draw panel background
        pygame.draw.rect(screen, (30, 30, 40), self.info_panel_rect)
        pygame.draw.line(screen, WHITE, 
                        (self.info_panel_rect.left, 0),
                        (self.info_panel_rect.left, SCREEN_HEIGHT), 2)

        # Draw system info at the top
        system_name = self.title_font.render(self.selected_system.name, True, WHITE)
        name_rect = system_name.get_rect(
            centerx=self.info_panel_rect.centerx,
            top=20
        )
        screen.blit(system_name, name_rect)

        star_type = self.info_font.render(
            self.selected_system.star_type.value,
            True, self.selected_system.color
        )
        type_rect = star_type.get_rect(
            centerx=self.info_panel_rect.centerx,
            top=name_rect.bottom + 10
        )
        screen.blit(star_type, type_rect)
        
        if self.selected_planet:
            # Draw separator
            pygame.draw.line(screen,
                           WHITE,
                           (self.info_panel_rect.left + 20, type_rect.bottom + 20),
                           (self.info_panel_rect.right - 20, type_rect.bottom + 20))

            # Planet information
            y_pos = type_rect.bottom + 40
            padding = 20

            # Planet type
            planet_type = self.info_font.render(
                self.selected_planet['type'].value,
                True, self.selected_planet['color']
            )
            screen.blit(planet_type, (self.info_panel_rect.left + padding, y_pos))
            y_pos += 40

            # Planet name
            planet_name = self.info_font.render(
                self.selected_planet['name'],
                True, WHITE
            )
            screen.blit(planet_name, (self.info_panel_rect.left + padding, y_pos))
            y_pos += 40

            # Resources header
            resources_text = self.info_font.render("Resources:", True, WHITE)
            screen.blit(resources_text, (self.info_panel_rect.left + padding, y_pos))
            y_pos += 40

            # List resources
            for resource in self.selected_planet['resources']:
                resource_text = self.detail_font.render(
                    f"{resource['type'].value}: {resource['amount']}",
                    True, WHITE
                )
                screen.blit(resource_text, (self.info_panel_rect.left + padding, y_pos))
                y_pos += 25

    def draw_save_notification(self, screen):
        if self.save_notification_time > 0:
            current_time = pygame.time.get_ticks()
            elapsed = current_time - self.save_notification_time
            
            if elapsed < self.save_notification_duration:
                # Calculate alpha for fade out
                alpha = 255 * (1 - (elapsed / self.save_notification_duration))
                
                # Draw notification
                notification_font = pygame.font.Font(None, 36)
                notification_text = notification_font.render("Game Saved!", True, WHITE)
                text_surface = pygame.Surface(notification_text.get_size(), pygame.SRCALPHA)
                text_surface.fill((0, 0, 0, int(alpha * 0.5)))  # Semi-transparent background
                text_surface.blit(notification_text, (0, 0))
                
                # Position at top center
                pos = (SCREEN_WIDTH // 2 - notification_text.get_width() // 2, 20)
                screen.blit(text_surface, pos)
            else:
                self.save_notification_time = 0

if __name__ == '__main__':
    game = Game()
    game.run()
