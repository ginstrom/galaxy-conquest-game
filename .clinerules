# Python Development Rules

## Version Requirements
- Python >= 3.8

## Code Style
- Maximum line length: 88 characters
- Docstring style: Google format
- Naming conventions:
  - Classes: PascalCase
  - Functions: snake_case
  - Variables: snake_case
  - Constants: UPPER_CASE

## Import Organization
1. Standard library imports
2. Third-party imports
3. Pygame imports
4. Local imports

- Group imports by type
- Alphabetize within groups

## Testing Requirements
- Framework: pytest
- Test files must match pattern: `test_*.py`
- Minimum coverage: 80%
- Fixtures location: `tests/conftest.py`

# Pygame Best Practices

## Game Loop
- Implement FPS limiting
- Use clock.tick() for consistent timing
- Handle events in separate function

## Sprite Management
- Use pygame.sprite.Group for sprite management
- Implement proper collision detection using sprite_collide methods
- Group related sprites for efficient updates

## Resource Handling
- Preload all assets at startup
- Store assets in `img/` directory
- Cache surfaces for reuse

## Display Settings
- Enable vsync
- Use double buffering
- Implement fullscreen toggle functionality

# Project Structure

## Required Directories
- `game/` - Core game modules
- `tests/` - Test files
- `img/` - Image assets
- `saves/` - Save files

## Module Organization
- Implementation files: `game/*.py`
- Test files: `tests/test_*.py`

## Required Files
- requirements.txt
- requirements-dev.txt
- pytest.ini
- README.md

# Code Organization

## Module Separation
Maintain separate modules for:
- Constants
- Enums
- Properties

## Class Structure
### Required Methods
- `__init__`
- `update`
- `draw`

### Method Conventions
- Private methods: Use underscore prefix
- Properties: Use @property decorator

# Documentation

## Required README Sections
1. Classes
2. Functions
3. Dependencies
4. Setup
5. Running Tests

## Docstring Requirements
All docstrings must include:
- Args
- Returns
- Raises

# Version Control

## Ignored Patterns
```
*.pyc
__pycache__/
.coverage
*.bak
saves/*.json
```

# Performance Guidelines

## Sprite Optimization
- Use convert_alpha() for transparent surfaces
- Implement dirty rectangles for efficient updates
- Group sprites for batch processing

## Memory Management
- Unload unused assets when not needed
- Limit particle effects for performance
- Implement resource pooling for frequently used objects

# Save System

## Configuration
- Format: JSON
- Directory: `saves/`
- Autosave:
  - Enabled by default
  - 5-minute intervals
